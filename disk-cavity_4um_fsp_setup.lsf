# Setup script to create project file using project parameters
#clear;
newproject;
switchtolayout; 
importmaterialdb("disk-cavity_4um_fsp_export.mdf");

# Global source settings (Global_Source)
global_source_settings=struct;
global_source_settings.bandwidth=3.21206e+14;
global_source_settings.center_frequency=5.88878e+14;
global_source_settings.center_wavelength=5.5e-07;
global_source_settings.eliminate_discontinuities=1;
global_source_settings.frequency=5.88878e+14;
global_source_settings.frequency_span=3.21206e+14;
global_source_settings.frequency_start=4.28275e+14;
global_source_settings.frequency_stop=7.49481e+14;
global_source_settings.offset=7.52311e-15;
global_source_settings.optimize_for_short_pulse=1;
global_source_settings.pulse_type='broadband';
global_source_settings.pulselength=2.65335e-15;
global_source_settings.set_frequency=0;
global_source_settings.set_time_domain=0;
global_source_settings.set_wavelength=1;
global_source_settings.wavelength_span=3e-07;
global_source_settings.wavelength_start=4e-07;
global_source_settings.wavelength_stop=7e-07;

setglobalsource("set wavelength",1);
setglobalsource("center wavelength", global_source_settings.center_wavelength);
setglobalsource("wavelength span", global_source_settings.wavelength_span);

setglobalsource("eliminate discontinuities", global_source_settings.eliminate_discontinuities);
setglobalsource("optimize for short pulse", global_source_settings.optimize_for_short_pulse);

# Global monitor settings (Global_Monitor)
global_monitor_settings=struct;
global_monitor_settings.custom_frequency_samples=5.88878e+14;
global_monitor_settings.frequency_center=5.88878e+14;
global_monitor_settings.frequency_points=5;
global_monitor_settings.frequency_span=3.21206e+14;
global_monitor_settings.maximum_frequency=7.49481e+14;
global_monitor_settings.maximum_wavelength=7e-07;
global_monitor_settings.min_smpling_per_cycle=2;
global_monitor_settings.minimum_frequency=4.28275e+14;
global_monitor_settings.minimum_wavelength=4e-07;
global_monitor_settings.sample_spacing='uniform';
global_monitor_settings.use_source_limits=1;
global_monitor_settings.use_wavelength_spacing=0;
global_monitor_settings.wavelength_center=5.5e-07;
global_monitor_settings.wavelength_span=3e-07;

try{setglobalmonitor("frequency center", global_monitor_settings.frequency_center);}catch(ErrMmsg);
try{setglobalmonitor("frequency span", global_monitor_settings.frequency_span);}catch(ErrMsg);
try{setglobalmonitor("sample spacing", global_monitor_settings.sample_spacing);}catch(ErrMsg);
try{setglobalmonitor("use source limits", global_monitor_settings.use_source_limits);}catch(ErrMsg);
try{setglobalmonitor("frequency points", global_monitor_settings.frequency_points);}catch(ErrMsg);
try{setglobalmonitor("min sampling per cycle", global_monitor_settings.min_smpling_per_cycle);}catch(ErrMsg);

# Setting up simulation objects

# membrane (Circle)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0.5);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.9");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","membrane");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",2.05e-06);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Circle");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",0);
obj_properties = setfield(obj_properties, "y",0);
obj_properties = setfield(obj_properties, "z",0);
obj_properties = setfield(obj_properties, "z span",2.1e-06);

groupscope("::model");addcircle;
try{set(obj_properties);}

# cytoplasm (Circle)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0.5);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.37");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","cytoplasm");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",2e-06);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Circle");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",0);
obj_properties = setfield(obj_properties, "y",0);
obj_properties = setfield(obj_properties, "z",0);
obj_properties = setfield(obj_properties, "z span",2e-06);

groupscope("::model");addcircle;
try{set(obj_properties);}

# gauss_par_distr (Structure Group)
obj_properties = struct;
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "name","gauss_par_distr");
script = "deleteall;
####################################################
# Random particle distribution - Gaussian
# This structure group consists of Gaussian distributed particles
# that can vary in size. 
#
# Input properties
# seed: randomizer seed
# index: index of refraction
# material
# n spheres: number of particles
# r max,r min: maximum and minimum radii of particles
# x,y,z std: number of standard deviations half the object span covers
# x,y,z span: The object span
# allow overlap: If set to 1, the particles can overlap.  If zero, particles are not 
#                allowed to overlap. It is important to realize that setting this option to zero
#                may alter the particle distribution. 
#
# Tags: gaussian normal random particle distribution 
#
# Copyright 2012 Lumerical Solutions Inc
#####################################################

# simplify variable names by removing spaces
n_spheres = %n spheres%;
r_max = %r max%;
r_min = %r min%;
x_std = %x std%;
y_std = %y std%;
z_std = %z std%;
x_span = %x span%;
y_span = %y span%;
z_span = %z span%;
allow_overlap = %allow overlap%;

# safety checks
if ((r_max<r_min) or (r_max<0) or (r_min<0)) {
  message("+'"'+"invalid radius values"+'"'+");
  break;
}
if ((x_span<0) or (y_span<0) or (z_span<0)) {
  message("+'"'+"invalid object span"+'"'+");
  break;
}
if ((allow_overlap!=1) and (allow_overlap!=0)) {
  message("+'"'+"Invalid overlap setting.  Setting 'allow overlap' to 1"+'"'+");
  allow_overlap = 1;
}

# set random number generator seed
randreset(seed);
retry=n_spheres+retry; #condition to end loop if it runs too long
xl=matrix(1,n_spheres);  #arrays to hold all the positions
yl=matrix(1,n_spheres);
zl=matrix(1,n_spheres);
rl=matrix(1,n_spheres);
n_sphere_added=0;

for (i=1; i<=n_spheres; i=i+1) {
  addSp=1;  # to add a sphere or not
  
  #----- distribution criteria -----
  # Box-Muller Gaussian number generation
  rl(i)=rand(r_min,r_max);
  xTemp = rand(-1,1);
  yTemp = rand(-1,1);
  zTemp = rand(-1,1);
  z2Temp= rand(-1,1);
  w = xTemp^2 + yTemp^2;
  w2= zTemp^2 + z2Temp^2;
  if ( (w<1) & (w2<1) ) {
    w = sqrt((-2*log(w))/w);
    w2= sqrt((-2*log(w2))/w2);
    xl(i) = xTemp*w*x_span/(2*x_std);  
    yl(i) = yTemp*w*y_span/(2*y_std);
    zl(i) = zTemp*w2*z_span/(2*z_std);     
  #---------------------------------    

    #----- check for overlaps -----
    if (!allow_overlap) {
      for(j=1; j<=i-1; j=j+1) {
        dx=xl(i)-xl(j);
        dy=yl(i)-yl(j);
        dz=zl(i)-zl(j);  
        dist = sqrt(dx^2 + dy^2 + dz^2);
        if ( real(dist) >= rl(i)+rl(j) ) {   # if the distance is acceptable, add a sphere
          addSp = addSp; 
        } else { 
          addSp = 0;
          j=i;   # exit loop
        } 
      }
    }
    #------------------------------
  } else { addSp = 0; }
 
  if ( addSp ) {
    n_sphere_added=n_sphere_added+1; #counting no. of particles added
    addsphere;
    set("+'"'+"material"+'"'+",material); 
    if(get("+'"'+"material"+'"'+")=="+'"'+"<Object defined dielectric>"+'"'+") 
      { set("+'"'+"index"+'"'+",index); }
    set("+'"'+"radius"+'"'+",rl(i));
    set("+'"'+"x"+'"'+",xl(i));
    set("+'"'+"y"+'"'+",yl(i));
    set("+'"'+"z"+'"'+",zl(i));
    set("+'"'+"detail"+'"'+",0);  # reduce drawing detail to make graphics faster
  } else { 
    i=i-1;  # if the distance isn't acceptable, retry main loop
    retry=retry-1;
    if(retry==0) { 
      message("+'"'+"Warning. Only "+'"'+"+num2str(n_sphere_added)+ "+'"'+" spheres are added. Increase 'retry' or 'spans'"+'"'+");
      break;
    } 
  }
}


make_plots=0;
if (make_plots) {
  plot(1:n_spheres,xl,"+'"'+""+'"'+","+'"'+""+'"'+","+'"'+"X"+'"'+","+'"'+"plot points"+'"'+");
  plot(1:n_spheres,yl,"+'"'+""+'"'+","+'"'+""+'"'+","+'"'+"Y"+'"'+","+'"'+"plot points"+'"'+");
  plot(1:n_spheres,zl,"+'"'+""+'"'+","+'"'+""+'"'+","+'"'+"Z"+'"'+","+'"'+"plot points"+'"'+");
}
";
obj_properties = setfield(obj_properties, "script",script);
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Structure Group");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",0);
obj_properties = setfield(obj_properties, "y",0);
obj_properties = setfield(obj_properties, "z",0);

groupscope("::model");addstructuregroup;
try{set(obj_properties);}

adduserprop("allow overlap",0,0);

adduserprop("index",0,1.5);

adduserprop("material",1,"<Object defined dielectric>");

adduserprop("n spheres",0,100);

adduserprop("r max",0,1e-07);

adduserprop("r min",0,5e-08);

adduserprop("retry",0,1000);

adduserprop("seed",0,1234);

adduserprop("x span",0,5e-06);

adduserprop("x std",0,3);

adduserprop("y span",0,5e-06);

adduserprop("y std",0,3);

adduserprop("z span",0,2e-06);

adduserprop("z std",0,3);

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",5.9576e-08);
obj_properties = setfield(obj_properties, "radius 2",5.9576e-08);
obj_properties = setfield(obj_properties, "radius 3",5.9576e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-3.78523e-08);
obj_properties = setfield(obj_properties, "y",1.97835e-06);
obj_properties = setfield(obj_properties, "z",4.31112e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",8.06056e-08);
obj_properties = setfield(obj_properties, "radius 2",8.06056e-08);
obj_properties = setfield(obj_properties, "radius 3",8.06056e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",5.90207e-07);
obj_properties = setfield(obj_properties, "y",5.61254e-07);
obj_properties = setfield(obj_properties, "z",1.23207e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",6.36296e-08);
obj_properties = setfield(obj_properties, "radius 2",6.36296e-08);
obj_properties = setfield(obj_properties, "radius 3",6.36296e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-6.06956e-07);
obj_properties = setfield(obj_properties, "y",-3.88354e-07);
obj_properties = setfield(obj_properties, "z",-1.8766e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",6.78909e-08);
obj_properties = setfield(obj_properties, "radius 2",6.78909e-08);
obj_properties = setfield(obj_properties, "radius 3",6.78909e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-2.69526e-07);
obj_properties = setfield(obj_properties, "y",5.50639e-10);
obj_properties = setfield(obj_properties, "z",-4.77225e-08);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",6.65508e-08);
obj_properties = setfield(obj_properties, "radius 2",6.65508e-08);
obj_properties = setfield(obj_properties, "radius 3",6.65508e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",5.26091e-07);
obj_properties = setfield(obj_properties, "y",7.4854e-07);
obj_properties = setfield(obj_properties, "z",-8.42721e-08);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",7.80598e-08);
obj_properties = setfield(obj_properties, "radius 2",7.80598e-08);
obj_properties = setfield(obj_properties, "radius 3",7.80598e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-5.74309e-07);
obj_properties = setfield(obj_properties, "y",3.98798e-09);
obj_properties = setfield(obj_properties, "z",-1.13189e-08);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",5.11072e-08);
obj_properties = setfield(obj_properties, "radius 2",5.11072e-08);
obj_properties = setfield(obj_properties, "radius 3",5.11072e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",8.09194e-07);
obj_properties = setfield(obj_properties, "y",-6.20692e-07);
obj_properties = setfield(obj_properties, "z",1.62432e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",9.9357e-08);
obj_properties = setfield(obj_properties, "radius 2",9.9357e-08);
obj_properties = setfield(obj_properties, "radius 3",9.9357e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-2.48995e-07);
obj_properties = setfield(obj_properties, "y",-7.2616e-07);
obj_properties = setfield(obj_properties, "z",2.18949e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",8.25689e-08);
obj_properties = setfield(obj_properties, "radius 2",8.25689e-08);
obj_properties = setfield(obj_properties, "radius 3",8.25689e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-8.48792e-07);
obj_properties = setfield(obj_properties, "y",-1.84585e-06);
obj_properties = setfield(obj_properties, "z",6.41965e-08);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",8.95311e-08);
obj_properties = setfield(obj_properties, "radius 2",8.95311e-08);
obj_properties = setfield(obj_properties, "radius 3",8.95311e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-1.62783e-06);
obj_properties = setfield(obj_properties, "y",-3.03622e-07);
obj_properties = setfield(obj_properties, "z",6.25145e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",5.20278e-08);
obj_properties = setfield(obj_properties, "radius 2",5.20278e-08);
obj_properties = setfield(obj_properties, "radius 3",5.20278e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-9.48784e-07);
obj_properties = setfield(obj_properties, "y",1.28161e-07);
obj_properties = setfield(obj_properties, "z",6.14696e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",8.52291e-08);
obj_properties = setfield(obj_properties, "radius 2",8.52291e-08);
obj_properties = setfield(obj_properties, "radius 3",8.52291e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-4.67916e-07);
obj_properties = setfield(obj_properties, "y",-1.0652e-06);
obj_properties = setfield(obj_properties, "z",-7.37676e-08);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",9.64773e-08);
obj_properties = setfield(obj_properties, "radius 2",9.64773e-08);
obj_properties = setfield(obj_properties, "radius 3",9.64773e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",2.01571e-07);
obj_properties = setfield(obj_properties, "y",4.81929e-07);
obj_properties = setfield(obj_properties, "z",2.3001e-08);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",7.66655e-08);
obj_properties = setfield(obj_properties, "radius 2",7.66655e-08);
obj_properties = setfield(obj_properties, "radius 3",7.66655e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-9.40793e-08);
obj_properties = setfield(obj_properties, "y",-4.17132e-07);
obj_properties = setfield(obj_properties, "z",-5.44804e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",7.15076e-08);
obj_properties = setfield(obj_properties, "radius 2",7.15076e-08);
obj_properties = setfield(obj_properties, "radius 3",7.15076e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-6.14109e-07);
obj_properties = setfield(obj_properties, "y",9.53732e-07);
obj_properties = setfield(obj_properties, "z",2.51664e-08);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",5.55947e-08);
obj_properties = setfield(obj_properties, "radius 2",5.55947e-08);
obj_properties = setfield(obj_properties, "radius 3",5.55947e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-6.1468e-07);
obj_properties = setfield(obj_properties, "y",1.57235e-07);
obj_properties = setfield(obj_properties, "z",5.83049e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",6.42625e-08);
obj_properties = setfield(obj_properties, "radius 2",6.42625e-08);
obj_properties = setfield(obj_properties, "radius 3",6.42625e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",1.1039e-06);
obj_properties = setfield(obj_properties, "y",5.21724e-07);
obj_properties = setfield(obj_properties, "z",-7.69735e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",8.69262e-08);
obj_properties = setfield(obj_properties, "radius 2",8.69262e-08);
obj_properties = setfield(obj_properties, "radius 3",8.69262e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",1.45192e-06);
obj_properties = setfield(obj_properties, "y",7.40508e-07);
obj_properties = setfield(obj_properties, "z",-6.78087e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",9.49983e-08);
obj_properties = setfield(obj_properties, "radius 2",9.49983e-08);
obj_properties = setfield(obj_properties, "radius 3",9.49983e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",1.32498e-06);
obj_properties = setfield(obj_properties, "y",-4.79449e-07);
obj_properties = setfield(obj_properties, "z",1.3023e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",7.18447e-08);
obj_properties = setfield(obj_properties, "radius 2",7.18447e-08);
obj_properties = setfield(obj_properties, "radius 3",7.18447e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",4.5491e-07);
obj_properties = setfield(obj_properties, "y",1.13847e-07);
obj_properties = setfield(obj_properties, "z",5.21436e-08);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",7.65777e-08);
obj_properties = setfield(obj_properties, "radius 2",7.65777e-08);
obj_properties = setfield(obj_properties, "radius 3",7.65777e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",3.46911e-07);
obj_properties = setfield(obj_properties, "y",-9.14184e-07);
obj_properties = setfield(obj_properties, "z",1.64083e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",7.38271e-08);
obj_properties = setfield(obj_properties, "radius 2",7.38271e-08);
obj_properties = setfield(obj_properties, "radius 3",7.38271e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",2.49905e-07);
obj_properties = setfield(obj_properties, "y",7.16967e-07);
obj_properties = setfield(obj_properties, "z",-4.38946e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",5.76286e-08);
obj_properties = setfield(obj_properties, "radius 2",5.76286e-08);
obj_properties = setfield(obj_properties, "radius 3",5.76286e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-1.03035e-06);
obj_properties = setfield(obj_properties, "y",2.14547e-07);
obj_properties = setfield(obj_properties, "z",-3.6598e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",7.5128e-08);
obj_properties = setfield(obj_properties, "radius 2",7.5128e-08);
obj_properties = setfield(obj_properties, "radius 3",7.5128e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",1.2418e-06);
obj_properties = setfield(obj_properties, "y",1.62465e-07);
obj_properties = setfield(obj_properties, "z",-1.90638e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",6.62854e-08);
obj_properties = setfield(obj_properties, "radius 2",6.62854e-08);
obj_properties = setfield(obj_properties, "radius 3",6.62854e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-3.59111e-07);
obj_properties = setfield(obj_properties, "y",-3.20702e-07);
obj_properties = setfield(obj_properties, "z",6.30988e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",6.26308e-08);
obj_properties = setfield(obj_properties, "radius 2",6.26308e-08);
obj_properties = setfield(obj_properties, "radius 3",6.26308e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",1.10128e-06);
obj_properties = setfield(obj_properties, "y",-8.39654e-07);
obj_properties = setfield(obj_properties, "z",4.17101e-09);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",5.39552e-08);
obj_properties = setfield(obj_properties, "radius 2",5.39552e-08);
obj_properties = setfield(obj_properties, "radius 3",5.39552e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",1.09183e-06);
obj_properties = setfield(obj_properties, "y",-1.39793e-06);
obj_properties = setfield(obj_properties, "z",-5.64524e-08);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",5.75698e-08);
obj_properties = setfield(obj_properties, "radius 2",5.75698e-08);
obj_properties = setfield(obj_properties, "radius 3",5.75698e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-7.37423e-07);
obj_properties = setfield(obj_properties, "y",-1.49549e-06);
obj_properties = setfield(obj_properties, "z",-3.97877e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",7.86242e-08);
obj_properties = setfield(obj_properties, "radius 2",7.86242e-08);
obj_properties = setfield(obj_properties, "radius 3",7.86242e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-6.24788e-07);
obj_properties = setfield(obj_properties, "y",1.05598e-07);
obj_properties = setfield(obj_properties, "z",-2.06619e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",6.61597e-08);
obj_properties = setfield(obj_properties, "radius 2",6.61597e-08);
obj_properties = setfield(obj_properties, "radius 3",6.61597e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",1.46449e-06);
obj_properties = setfield(obj_properties, "y",1.05264e-06);
obj_properties = setfield(obj_properties, "z",-1.32675e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",6.10511e-08);
obj_properties = setfield(obj_properties, "radius 2",6.10511e-08);
obj_properties = setfield(obj_properties, "radius 3",6.10511e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-2.98881e-07);
obj_properties = setfield(obj_properties, "y",-6.2195e-07);
obj_properties = setfield(obj_properties, "z",8.78507e-08);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",7.82949e-08);
obj_properties = setfield(obj_properties, "radius 2",7.82949e-08);
obj_properties = setfield(obj_properties, "radius 3",7.82949e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",1.39049e-06);
obj_properties = setfield(obj_properties, "y",1.6872e-06);
obj_properties = setfield(obj_properties, "z",-2.17566e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",9.87248e-08);
obj_properties = setfield(obj_properties, "radius 2",9.87248e-08);
obj_properties = setfield(obj_properties, "radius 3",9.87248e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-9.0824e-07);
obj_properties = setfield(obj_properties, "y",1.28187e-06);
obj_properties = setfield(obj_properties, "z",-2.73646e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",6.30462e-08);
obj_properties = setfield(obj_properties, "radius 2",6.30462e-08);
obj_properties = setfield(obj_properties, "radius 3",6.30462e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-6.17958e-07);
obj_properties = setfield(obj_properties, "y",2.61092e-07);
obj_properties = setfield(obj_properties, "z",1.80788e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",6.69568e-08);
obj_properties = setfield(obj_properties, "radius 2",6.69568e-08);
obj_properties = setfield(obj_properties, "radius 3",6.69568e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",1.40435e-06);
obj_properties = setfield(obj_properties, "y",-8.73374e-07);
obj_properties = setfield(obj_properties, "z",8.27712e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",9.09352e-08);
obj_properties = setfield(obj_properties, "radius 2",9.09352e-08);
obj_properties = setfield(obj_properties, "radius 3",9.09352e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-4.97124e-07);
obj_properties = setfield(obj_properties, "y",4.93208e-08);
obj_properties = setfield(obj_properties, "z",7.10012e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",7.96706e-08);
obj_properties = setfield(obj_properties, "radius 2",7.96706e-08);
obj_properties = setfield(obj_properties, "radius 3",7.96706e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-8.91108e-07);
obj_properties = setfield(obj_properties, "y",-1.57457e-06);
obj_properties = setfield(obj_properties, "z",-3.66253e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",8.67473e-08);
obj_properties = setfield(obj_properties, "radius 2",8.67473e-08);
obj_properties = setfield(obj_properties, "radius 3",8.67473e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-9.6439e-07);
obj_properties = setfield(obj_properties, "y",-1.49561e-06);
obj_properties = setfield(obj_properties, "z",-2.00078e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",7.64968e-08);
obj_properties = setfield(obj_properties, "radius 2",7.64968e-08);
obj_properties = setfield(obj_properties, "radius 3",7.64968e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",5.6696e-07);
obj_properties = setfield(obj_properties, "y",5.60813e-07);
obj_properties = setfield(obj_properties, "z",6.30114e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",7.04124e-08);
obj_properties = setfield(obj_properties, "radius 2",7.04124e-08);
obj_properties = setfield(obj_properties, "radius 3",7.04124e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",8.77677e-07);
obj_properties = setfield(obj_properties, "y",8.40952e-07);
obj_properties = setfield(obj_properties, "z",-3.44102e-08);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",5.15517e-08);
obj_properties = setfield(obj_properties, "radius 2",5.15517e-08);
obj_properties = setfield(obj_properties, "radius 3",5.15517e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",6.36823e-07);
obj_properties = setfield(obj_properties, "y",-1.73797e-06);
obj_properties = setfield(obj_properties, "z",-2.93573e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",8.21593e-08);
obj_properties = setfield(obj_properties, "radius 2",8.21593e-08);
obj_properties = setfield(obj_properties, "radius 3",8.21593e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-2.83605e-08);
obj_properties = setfield(obj_properties, "y",5.24685e-07);
obj_properties = setfield(obj_properties, "z",-2.09173e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",8.78774e-08);
obj_properties = setfield(obj_properties, "radius 2",8.78774e-08);
obj_properties = setfield(obj_properties, "radius 3",8.78774e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",1.42908e-06);
obj_properties = setfield(obj_properties, "y",1.34777e-07);
obj_properties = setfield(obj_properties, "z",-3.30782e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",7.02785e-08);
obj_properties = setfield(obj_properties, "radius 2",7.02785e-08);
obj_properties = setfield(obj_properties, "radius 3",7.02785e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",6.24425e-07);
obj_properties = setfield(obj_properties, "y",-7.55688e-08);
obj_properties = setfield(obj_properties, "z",2.3671e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",8.58339e-08);
obj_properties = setfield(obj_properties, "radius 2",8.58339e-08);
obj_properties = setfield(obj_properties, "radius 3",8.58339e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",7.17829e-08);
obj_properties = setfield(obj_properties, "y",-4.44015e-07);
obj_properties = setfield(obj_properties, "z",3.42732e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",6.80193e-08);
obj_properties = setfield(obj_properties, "radius 2",6.80193e-08);
obj_properties = setfield(obj_properties, "radius 3",6.80193e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-1.39421e-06);
obj_properties = setfield(obj_properties, "y",-4.65138e-07);
obj_properties = setfield(obj_properties, "z",-1.60356e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",5.41764e-08);
obj_properties = setfield(obj_properties, "radius 2",5.41764e-08);
obj_properties = setfield(obj_properties, "radius 3",5.41764e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-3.59013e-07);
obj_properties = setfield(obj_properties, "y",2.41448e-07);
obj_properties = setfield(obj_properties, "z",3.67514e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",8.95673e-08);
obj_properties = setfield(obj_properties, "radius 2",8.95673e-08);
obj_properties = setfield(obj_properties, "radius 3",8.95673e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",1.77056e-06);
obj_properties = setfield(obj_properties, "y",-9.154e-08);
obj_properties = setfield(obj_properties, "z",5.45553e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",6.85463e-08);
obj_properties = setfield(obj_properties, "radius 2",6.85463e-08);
obj_properties = setfield(obj_properties, "radius 3",6.85463e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-4.29628e-07);
obj_properties = setfield(obj_properties, "y",-4.92717e-08);
obj_properties = setfield(obj_properties, "z",-4.02191e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",7.52139e-08);
obj_properties = setfield(obj_properties, "radius 2",7.52139e-08);
obj_properties = setfield(obj_properties, "radius 3",7.52139e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-6.81963e-07);
obj_properties = setfield(obj_properties, "y",6.06951e-07);
obj_properties = setfield(obj_properties, "z",-7.08528e-08);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",5.36455e-08);
obj_properties = setfield(obj_properties, "radius 2",5.36455e-08);
obj_properties = setfield(obj_properties, "radius 3",5.36455e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-9.8932e-07);
obj_properties = setfield(obj_properties, "y",5.35013e-07);
obj_properties = setfield(obj_properties, "z",-2.72219e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",6.48464e-08);
obj_properties = setfield(obj_properties, "radius 2",6.48464e-08);
obj_properties = setfield(obj_properties, "radius 3",6.48464e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-1.20069e-06);
obj_properties = setfield(obj_properties, "y",-1.14579e-06);
obj_properties = setfield(obj_properties, "z",8.29278e-08);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",5.01095e-08);
obj_properties = setfield(obj_properties, "radius 2",5.01095e-08);
obj_properties = setfield(obj_properties, "radius 3",5.01095e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-6.88973e-08);
obj_properties = setfield(obj_properties, "y",-4.55324e-07);
obj_properties = setfield(obj_properties, "z",1.26311e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",7.13586e-08);
obj_properties = setfield(obj_properties, "radius 2",7.13586e-08);
obj_properties = setfield(obj_properties, "radius 3",7.13586e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",3.74633e-07);
obj_properties = setfield(obj_properties, "y",1.10567e-06);
obj_properties = setfield(obj_properties, "z",-2.85837e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",5.2675e-08);
obj_properties = setfield(obj_properties, "radius 2",5.2675e-08);
obj_properties = setfield(obj_properties, "radius 3",5.2675e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",1.68457e-07);
obj_properties = setfield(obj_properties, "y",-6.22867e-07);
obj_properties = setfield(obj_properties, "z",7.68365e-08);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",8.14746e-08);
obj_properties = setfield(obj_properties, "radius 2",8.14746e-08);
obj_properties = setfield(obj_properties, "radius 3",8.14746e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",4.70535e-07);
obj_properties = setfield(obj_properties, "y",2.11386e-07);
obj_properties = setfield(obj_properties, "z",2.66366e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",5.18592e-08);
obj_properties = setfield(obj_properties, "radius 2",5.18592e-08);
obj_properties = setfield(obj_properties, "radius 3",5.18592e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",1.22488e-06);
obj_properties = setfield(obj_properties, "y",1.30515e-07);
obj_properties = setfield(obj_properties, "z",3.28779e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",8.63898e-08);
obj_properties = setfield(obj_properties, "radius 2",8.63898e-08);
obj_properties = setfield(obj_properties, "radius 3",8.63898e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",8.88654e-07);
obj_properties = setfield(obj_properties, "y",1.06101e-06);
obj_properties = setfield(obj_properties, "z",-3.81071e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",6.66688e-08);
obj_properties = setfield(obj_properties, "radius 2",6.66688e-08);
obj_properties = setfield(obj_properties, "radius 3",6.66688e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",2.36592e-06);
obj_properties = setfield(obj_properties, "y",1.02087e-06);
obj_properties = setfield(obj_properties, "z",5.36164e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",9.68775e-08);
obj_properties = setfield(obj_properties, "radius 2",9.68775e-08);
obj_properties = setfield(obj_properties, "radius 3",9.68775e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-4.03441e-07);
obj_properties = setfield(obj_properties, "y",4.01792e-08);
obj_properties = setfield(obj_properties, "z",9.13746e-08);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",9.25126e-08);
obj_properties = setfield(obj_properties, "radius 2",9.25126e-08);
obj_properties = setfield(obj_properties, "radius 3",9.25126e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-1.32326e-08);
obj_properties = setfield(obj_properties, "y",5.31467e-07);
obj_properties = setfield(obj_properties, "z",3.84874e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",5.20951e-08);
obj_properties = setfield(obj_properties, "radius 2",5.20951e-08);
obj_properties = setfield(obj_properties, "radius 3",5.20951e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",1.41788e-07);
obj_properties = setfield(obj_properties, "y",-1.07024e-06);
obj_properties = setfield(obj_properties, "z",4.80701e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",9.94173e-08);
obj_properties = setfield(obj_properties, "radius 2",9.94173e-08);
obj_properties = setfield(obj_properties, "radius 3",9.94173e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",6.16111e-07);
obj_properties = setfield(obj_properties, "y",2.20185e-07);
obj_properties = setfield(obj_properties, "z",-3.89772e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",6.28333e-08);
obj_properties = setfield(obj_properties, "radius 2",6.28333e-08);
obj_properties = setfield(obj_properties, "radius 3",6.28333e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-7.09732e-07);
obj_properties = setfield(obj_properties, "y",4.21253e-07);
obj_properties = setfield(obj_properties, "z",-4.84324e-08);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",6.65004e-08);
obj_properties = setfield(obj_properties, "radius 2",6.65004e-08);
obj_properties = setfield(obj_properties, "radius 3",6.65004e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",6.45848e-07);
obj_properties = setfield(obj_properties, "y",1.67057e-07);
obj_properties = setfield(obj_properties, "z",-1.18568e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",9.16462e-08);
obj_properties = setfield(obj_properties, "radius 2",9.16462e-08);
obj_properties = setfield(obj_properties, "radius 3",9.16462e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",8.19611e-07);
obj_properties = setfield(obj_properties, "y",-1.5747e-06);
obj_properties = setfield(obj_properties, "z",1.46515e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",5.98827e-08);
obj_properties = setfield(obj_properties, "radius 2",5.98827e-08);
obj_properties = setfield(obj_properties, "radius 3",5.98827e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-3.95491e-07);
obj_properties = setfield(obj_properties, "y",-4.71707e-07);
obj_properties = setfield(obj_properties, "z",-6.10182e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",8.57007e-08);
obj_properties = setfield(obj_properties, "radius 2",8.57007e-08);
obj_properties = setfield(obj_properties, "radius 3",8.57007e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-4.37065e-07);
obj_properties = setfield(obj_properties, "y",-5.19416e-07);
obj_properties = setfield(obj_properties, "z",-5.83577e-08);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",7.45083e-08);
obj_properties = setfield(obj_properties, "radius 2",7.45083e-08);
obj_properties = setfield(obj_properties, "radius 3",7.45083e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-1.01921e-06);
obj_properties = setfield(obj_properties, "y",7.50506e-08);
obj_properties = setfield(obj_properties, "z",-4.15731e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",7.57303e-08);
obj_properties = setfield(obj_properties, "radius 2",7.57303e-08);
obj_properties = setfield(obj_properties, "radius 3",7.57303e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",6.69632e-07);
obj_properties = setfield(obj_properties, "y",-2.84495e-07);
obj_properties = setfield(obj_properties, "z",1.23694e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",9.26301e-08);
obj_properties = setfield(obj_properties, "radius 2",9.26301e-08);
obj_properties = setfield(obj_properties, "radius 3",9.26301e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",1.19601e-06);
obj_properties = setfield(obj_properties, "y",1.56884e-06);
obj_properties = setfield(obj_properties, "z",-2.55897e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",6.63065e-08);
obj_properties = setfield(obj_properties, "radius 2",6.63065e-08);
obj_properties = setfield(obj_properties, "radius 3",6.63065e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",6.86788e-07);
obj_properties = setfield(obj_properties, "y",1.92745e-06);
obj_properties = setfield(obj_properties, "z",3.31049e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",6.72581e-08);
obj_properties = setfield(obj_properties, "radius 2",6.72581e-08);
obj_properties = setfield(obj_properties, "radius 3",6.72581e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-4.6776e-07);
obj_properties = setfield(obj_properties, "y",-1.34319e-07);
obj_properties = setfield(obj_properties, "z",-2.01893e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",5.25986e-08);
obj_properties = setfield(obj_properties, "radius 2",5.25986e-08);
obj_properties = setfield(obj_properties, "radius 3",5.25986e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-2.04654e-06);
obj_properties = setfield(obj_properties, "y",3.09379e-07);
obj_properties = setfield(obj_properties, "z",-2.53194e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",6.63591e-08);
obj_properties = setfield(obj_properties, "radius 2",6.63591e-08);
obj_properties = setfield(obj_properties, "radius 3",6.63591e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",7.11301e-07);
obj_properties = setfield(obj_properties, "y",2.54511e-07);
obj_properties = setfield(obj_properties, "z",1.01309e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",9.7662e-08);
obj_properties = setfield(obj_properties, "radius 2",9.7662e-08);
obj_properties = setfield(obj_properties, "radius 3",9.7662e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-1.18259e-07);
obj_properties = setfield(obj_properties, "y",8.25228e-07);
obj_properties = setfield(obj_properties, "z",-2.34594e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",7.59818e-08);
obj_properties = setfield(obj_properties, "radius 2",7.59818e-08);
obj_properties = setfield(obj_properties, "radius 3",7.59818e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",5.58881e-07);
obj_properties = setfield(obj_properties, "y",-7.66679e-07);
obj_properties = setfield(obj_properties, "z",-4.09825e-08);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",6.99122e-08);
obj_properties = setfield(obj_properties, "radius 2",6.99122e-08);
obj_properties = setfield(obj_properties, "radius 3",6.99122e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-6.36803e-07);
obj_properties = setfield(obj_properties, "y",-6.01214e-07);
obj_properties = setfield(obj_properties, "z",-1.66285e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",8.6262e-08);
obj_properties = setfield(obj_properties, "radius 2",8.6262e-08);
obj_properties = setfield(obj_properties, "radius 3",8.6262e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-5.28633e-08);
obj_properties = setfield(obj_properties, "y",3.35834e-07);
obj_properties = setfield(obj_properties, "z",1.07968e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",6.03769e-08);
obj_properties = setfield(obj_properties, "radius 2",6.03769e-08);
obj_properties = setfield(obj_properties, "radius 3",6.03769e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",5.80317e-08);
obj_properties = setfield(obj_properties, "y",3.42088e-08);
obj_properties = setfield(obj_properties, "z",-4.44366e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",8.11481e-08);
obj_properties = setfield(obj_properties, "radius 2",8.11481e-08);
obj_properties = setfield(obj_properties, "radius 3",8.11481e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",6.06829e-07);
obj_properties = setfield(obj_properties, "y",-2.09185e-06);
obj_properties = setfield(obj_properties, "z",-4.61235e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",8.42484e-08);
obj_properties = setfield(obj_properties, "radius 2",8.42484e-08);
obj_properties = setfield(obj_properties, "radius 3",8.42484e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-3.24462e-07);
obj_properties = setfield(obj_properties, "y",8.78181e-08);
obj_properties = setfield(obj_properties, "z",3.08459e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",5.88847e-08);
obj_properties = setfield(obj_properties, "radius 2",5.88847e-08);
obj_properties = setfield(obj_properties, "radius 3",5.88847e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",6.4406e-07);
obj_properties = setfield(obj_properties, "y",-5.83096e-07);
obj_properties = setfield(obj_properties, "z",-1.64959e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",9.06064e-08);
obj_properties = setfield(obj_properties, "radius 2",9.06064e-08);
obj_properties = setfield(obj_properties, "radius 3",9.06064e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-1.44379e-06);
obj_properties = setfield(obj_properties, "y",-1.56301e-06);
obj_properties = setfield(obj_properties, "z",-2.33956e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",6.1941e-08);
obj_properties = setfield(obj_properties, "radius 2",6.1941e-08);
obj_properties = setfield(obj_properties, "radius 3",6.1941e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-3.39636e-07);
obj_properties = setfield(obj_properties, "y",9.28676e-07);
obj_properties = setfield(obj_properties, "z",2.5451e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",8.40397e-08);
obj_properties = setfield(obj_properties, "radius 2",8.40397e-08);
obj_properties = setfield(obj_properties, "radius 3",8.40397e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",6.18617e-08);
obj_properties = setfield(obj_properties, "y",-3.37222e-07);
obj_properties = setfield(obj_properties, "z",-4.49693e-08);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",7.43678e-08);
obj_properties = setfield(obj_properties, "radius 2",7.43678e-08);
obj_properties = setfield(obj_properties, "radius 3",7.43678e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",2.92932e-07);
obj_properties = setfield(obj_properties, "y",-1.62795e-07);
obj_properties = setfield(obj_properties, "z",-3.87553e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",7.25008e-08);
obj_properties = setfield(obj_properties, "radius 2",7.25008e-08);
obj_properties = setfield(obj_properties, "radius 3",7.25008e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",4.65916e-07);
obj_properties = setfield(obj_properties, "y",-5.8807e-07);
obj_properties = setfield(obj_properties, "z",-3.67205e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",9.31921e-08);
obj_properties = setfield(obj_properties, "radius 2",9.31921e-08);
obj_properties = setfield(obj_properties, "radius 3",9.31921e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-2.17895e-07);
obj_properties = setfield(obj_properties, "y",1.31656e-06);
obj_properties = setfield(obj_properties, "z",1.40652e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",9.23012e-08);
obj_properties = setfield(obj_properties, "radius 2",9.23012e-08);
obj_properties = setfield(obj_properties, "radius 3",9.23012e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-1.397e-06);
obj_properties = setfield(obj_properties, "y",-2.40554e-06);
obj_properties = setfield(obj_properties, "z",4.50451e-08);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",9.95554e-08);
obj_properties = setfield(obj_properties, "radius 2",9.95554e-08);
obj_properties = setfield(obj_properties, "radius 3",9.95554e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-4.43443e-08);
obj_properties = setfield(obj_properties, "y",-6.74597e-08);
obj_properties = setfield(obj_properties, "z",-2.55598e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",6.33288e-08);
obj_properties = setfield(obj_properties, "radius 2",6.33288e-08);
obj_properties = setfield(obj_properties, "radius 3",6.33288e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-1.16506e-06);
obj_properties = setfield(obj_properties, "y",-7.31836e-07);
obj_properties = setfield(obj_properties, "z",3.59724e-08);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",9.74777e-08);
obj_properties = setfield(obj_properties, "radius 2",9.74777e-08);
obj_properties = setfield(obj_properties, "radius 3",9.74777e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",1.51708e-08);
obj_properties = setfield(obj_properties, "y",4.35128e-07);
obj_properties = setfield(obj_properties, "z",5.96696e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",8.85842e-08);
obj_properties = setfield(obj_properties, "radius 2",8.85842e-08);
obj_properties = setfield(obj_properties, "radius 3",8.85842e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",3.8504e-07);
obj_properties = setfield(obj_properties, "y",4.90092e-07);
obj_properties = setfield(obj_properties, "z",-3.53843e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",7.47484e-08);
obj_properties = setfield(obj_properties, "radius 2",7.47484e-08);
obj_properties = setfield(obj_properties, "radius 3",7.47484e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-2.28757e-07);
obj_properties = setfield(obj_properties, "y",1.10373e-06);
obj_properties = setfield(obj_properties, "z",3.61208e-08);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",7.41526e-08);
obj_properties = setfield(obj_properties, "radius 2",7.41526e-08);
obj_properties = setfield(obj_properties, "radius 3",7.41526e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-1.9858e-07);
obj_properties = setfield(obj_properties, "y",-8.27241e-07);
obj_properties = setfield(obj_properties, "z",2.20834e-08);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",5.7022e-08);
obj_properties = setfield(obj_properties, "radius 2",5.7022e-08);
obj_properties = setfield(obj_properties, "radius 3",5.7022e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-2.94618e-07);
obj_properties = setfield(obj_properties, "y",-3.22605e-07);
obj_properties = setfield(obj_properties, "z",-4.44062e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",5.07252e-08);
obj_properties = setfield(obj_properties, "radius 2",5.07252e-08);
obj_properties = setfield(obj_properties, "radius 3",5.07252e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",2.6792e-07);
obj_properties = setfield(obj_properties, "y",3.98986e-08);
obj_properties = setfield(obj_properties, "z",3.72123e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",8.80987e-08);
obj_properties = setfield(obj_properties, "radius 2",8.80987e-08);
obj_properties = setfield(obj_properties, "radius 3",8.80987e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",1.38547e-06);
obj_properties = setfield(obj_properties, "y",-4.7396e-07);
obj_properties = setfield(obj_properties, "z",-6.05098e-08);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# sphere (Sphere)
obj_properties = struct;
obj_properties = setfield(obj_properties, "alpha",1);
obj_properties = setfield(obj_properties, "color opacity",1);
obj_properties = setfield(obj_properties, "detail",0);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "first axis","none");
obj_properties = setfield(obj_properties, "grid attribute name","");
obj_properties = setfield(obj_properties, "index","1.5");
obj_properties = setfield(obj_properties, "index units","microns");
obj_properties = setfield(obj_properties, "make ellipsoid",0);
obj_properties = setfield(obj_properties, "material","<Object defined dielectric>");
obj_properties = setfield(obj_properties, "name","sphere");
obj_properties = setfield(obj_properties, "override color opacity from material database",1);
obj_properties = setfield(obj_properties, "override mesh order from material database",0);
obj_properties = setfield(obj_properties, "radius",7.4166e-08);
obj_properties = setfield(obj_properties, "radius 2",7.4166e-08);
obj_properties = setfield(obj_properties, "radius 3",7.4166e-08);
obj_properties = setfield(obj_properties, "render type","detailed");
obj_properties = setfield(obj_properties, "second axis","none");
obj_properties = setfield(obj_properties, "set color opacity from material database",0);
obj_properties = setfield(obj_properties, "set mesh order from material database",1);
obj_properties = setfield(obj_properties, "third axis","none");
obj_properties = setfield(obj_properties, "type","Sphere");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",-1.1944e-06);
obj_properties = setfield(obj_properties, "y",-2.74114e-07);
obj_properties = setfield(obj_properties, "z",1.60998e-07);

groupscope("::model::gauss_par_distr");addsphere;
try{set(obj_properties);}

# source (DipoleSource)
obj_properties = struct;
obj_properties = setfield(obj_properties, "amplitude",1);
obj_properties = setfield(obj_properties, "angle",0);
obj_properties = setfield(obj_properties, "center wavelength",5.5e-07);
obj_properties = setfield(obj_properties, "dipole type","Electric dipole");
obj_properties = setfield(obj_properties, "eliminate discontinuities",1);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "name","source");
obj_properties = setfield(obj_properties, "optimize for short pulse",0);
obj_properties = setfield(obj_properties, "override global source settings",1);
obj_properties = setfield(obj_properties, "phase",0);
obj_properties = setfield(obj_properties, "phi",0);
obj_properties = setfield(obj_properties, "record local field",1);
obj_properties = setfield(obj_properties, "set frequency",0);
obj_properties = setfield(obj_properties, "set time domain",0);
obj_properties = setfield(obj_properties, "set wavelength",1);
obj_properties = setfield(obj_properties, "theta",0);
obj_properties = setfield(obj_properties, "type","DipoleSource");
obj_properties = setfield(obj_properties, "use global source settings",0);
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "wavelength start",4e-07);
obj_properties = setfield(obj_properties, "wavelength stop",7e-07);
obj_properties = setfield(obj_properties, "x",0);
obj_properties = setfield(obj_properties, "y",0);
obj_properties = setfield(obj_properties, "z",0);

groupscope("::model");adddipole;
try{set(obj_properties);}

# source_1 (DipoleSource)
obj_properties = struct;
obj_properties = setfield(obj_properties, "amplitude",1);
obj_properties = setfield(obj_properties, "angle",0);
obj_properties = setfield(obj_properties, "center wavelength",5.5e-07);
obj_properties = setfield(obj_properties, "dipole type","Electric dipole");
obj_properties = setfield(obj_properties, "eliminate discontinuities",1);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "name","source_1");
obj_properties = setfield(obj_properties, "optimize for short pulse",0);
obj_properties = setfield(obj_properties, "override global source settings",1);
obj_properties = setfield(obj_properties, "phase",0);
obj_properties = setfield(obj_properties, "phi",0);
obj_properties = setfield(obj_properties, "record local field",1);
obj_properties = setfield(obj_properties, "set frequency",0);
obj_properties = setfield(obj_properties, "set time domain",0);
obj_properties = setfield(obj_properties, "set wavelength",1);
obj_properties = setfield(obj_properties, "theta",0);
obj_properties = setfield(obj_properties, "type","DipoleSource");
obj_properties = setfield(obj_properties, "use global source settings",0);
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "wavelength start",4e-07);
obj_properties = setfield(obj_properties, "wavelength stop",7e-07);
obj_properties = setfield(obj_properties, "x",1.3e-06);
obj_properties = setfield(obj_properties, "y",1.3e-06);
obj_properties = setfield(obj_properties, "z",0);

groupscope("::model");adddipole;
try{set(obj_properties);}

# source_1_1 (DipoleSource)
obj_properties = struct;
obj_properties = setfield(obj_properties, "amplitude",1);
obj_properties = setfield(obj_properties, "angle",0);
obj_properties = setfield(obj_properties, "center wavelength",5.5e-07);
obj_properties = setfield(obj_properties, "dipole type","Electric dipole");
obj_properties = setfield(obj_properties, "eliminate discontinuities",1);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "name","source_1_1");
obj_properties = setfield(obj_properties, "optimize for short pulse",0);
obj_properties = setfield(obj_properties, "override global source settings",1);
obj_properties = setfield(obj_properties, "phase",0);
obj_properties = setfield(obj_properties, "phi",0);
obj_properties = setfield(obj_properties, "record local field",1);
obj_properties = setfield(obj_properties, "set frequency",0);
obj_properties = setfield(obj_properties, "set time domain",0);
obj_properties = setfield(obj_properties, "set wavelength",1);
obj_properties = setfield(obj_properties, "theta",0);
obj_properties = setfield(obj_properties, "type","DipoleSource");
obj_properties = setfield(obj_properties, "use global source settings",0);
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "wavelength start",4e-07);
obj_properties = setfield(obj_properties, "wavelength stop",7e-07);
obj_properties = setfield(obj_properties, "x",-1.3e-06);
obj_properties = setfield(obj_properties, "y",1.3e-06);
obj_properties = setfield(obj_properties, "z",0);

groupscope("::model");adddipole;
try{set(obj_properties);}

# source_1_1_1 (DipoleSource)
obj_properties = struct;
obj_properties = setfield(obj_properties, "amplitude",1);
obj_properties = setfield(obj_properties, "angle",0);
obj_properties = setfield(obj_properties, "center wavelength",5.5e-07);
obj_properties = setfield(obj_properties, "dipole type","Electric dipole");
obj_properties = setfield(obj_properties, "eliminate discontinuities",1);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "name","source_1_1_1");
obj_properties = setfield(obj_properties, "optimize for short pulse",0);
obj_properties = setfield(obj_properties, "override global source settings",1);
obj_properties = setfield(obj_properties, "phase",0);
obj_properties = setfield(obj_properties, "phi",0);
obj_properties = setfield(obj_properties, "record local field",1);
obj_properties = setfield(obj_properties, "set frequency",0);
obj_properties = setfield(obj_properties, "set time domain",0);
obj_properties = setfield(obj_properties, "set wavelength",1);
obj_properties = setfield(obj_properties, "theta",0);
obj_properties = setfield(obj_properties, "type","DipoleSource");
obj_properties = setfield(obj_properties, "use global source settings",0);
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "wavelength start",4e-07);
obj_properties = setfield(obj_properties, "wavelength stop",7e-07);
obj_properties = setfield(obj_properties, "x",-1.3e-06);
obj_properties = setfield(obj_properties, "y",-1.3e-06);
obj_properties = setfield(obj_properties, "z",0);

groupscope("::model");adddipole;
try{set(obj_properties);}

# source_1_1_1_1 (DipoleSource)
obj_properties = struct;
obj_properties = setfield(obj_properties, "amplitude",1);
obj_properties = setfield(obj_properties, "angle",0);
obj_properties = setfield(obj_properties, "center wavelength",5.5e-07);
obj_properties = setfield(obj_properties, "dipole type","Electric dipole");
obj_properties = setfield(obj_properties, "eliminate discontinuities",1);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "name","source_1_1_1_1");
obj_properties = setfield(obj_properties, "optimize for short pulse",0);
obj_properties = setfield(obj_properties, "override global source settings",1);
obj_properties = setfield(obj_properties, "phase",0);
obj_properties = setfield(obj_properties, "phi",0);
obj_properties = setfield(obj_properties, "record local field",1);
obj_properties = setfield(obj_properties, "set frequency",0);
obj_properties = setfield(obj_properties, "set time domain",0);
obj_properties = setfield(obj_properties, "set wavelength",1);
obj_properties = setfield(obj_properties, "theta",0);
obj_properties = setfield(obj_properties, "type","DipoleSource");
obj_properties = setfield(obj_properties, "use global source settings",0);
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "wavelength start",4e-07);
obj_properties = setfield(obj_properties, "wavelength stop",7e-07);
obj_properties = setfield(obj_properties, "x",1.3e-06);
obj_properties = setfield(obj_properties, "y",-1.3e-06);
obj_properties = setfield(obj_properties, "z",0);

groupscope("::model");adddipole;
try{set(obj_properties);}

# FDTD (FDTD)
obj_properties = struct;
obj_properties = setfield(obj_properties, "allow grading in x",1);
obj_properties = setfield(obj_properties, "allow grading in y",1);
obj_properties = setfield(obj_properties, "allow symmetry on all boundaries",0);
obj_properties = setfield(obj_properties, "always use complex fields",0);
obj_properties = setfield(obj_properties, "auto shutoff max",100000);
obj_properties = setfield(obj_properties, "background material","H2O (Water) - Palik");
obj_properties = setfield(obj_properties, "bfast alpha",1);
obj_properties = setfield(obj_properties, "bfast dt multiplier",0.5);
obj_properties = setfield(obj_properties, "checkpoint at shutoff",0);
obj_properties = setfield(obj_properties, "checkpoint during simulation",0);
obj_properties = setfield(obj_properties, "checkpoint period",10);
obj_properties = setfield(obj_properties, "conformal meshing refinement",7);
obj_properties = setfield(obj_properties, "define x mesh by","mesh cells per wavelength");
obj_properties = setfield(obj_properties, "define y mesh by","mesh cells per wavelength");
obj_properties = setfield(obj_properties, "dimension","2D");
obj_properties = setfield(obj_properties, "down sample time",100);
obj_properties = setfield(obj_properties, "dt stability factor",0.99);
obj_properties = setfield(obj_properties, "dx",1e-07);
obj_properties = setfield(obj_properties, "dy",1e-07);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "extend structure through pml",1);
obj_properties = setfield(obj_properties, "force symmetric x mesh",0);
obj_properties = setfield(obj_properties, "force symmetric y mesh",0);
obj_properties = setfield(obj_properties, "global monitor custom frequency samples",588878042500000);
obj_properties = setfield(obj_properties, "global monitor frequency center",588878042500000);
obj_properties = setfield(obj_properties, "global monitor frequency points",5);
obj_properties = setfield(obj_properties, "global monitor frequency span",321206205000000);
obj_properties = setfield(obj_properties, "global monitor maximum frequency",749481145000000);
obj_properties = setfield(obj_properties, "global monitor maximum wavelength",7e-07);
obj_properties = setfield(obj_properties, "global monitor minimum frequency",428274940000000);
obj_properties = setfield(obj_properties, "global monitor minimum wavelength",4e-07);
obj_properties = setfield(obj_properties, "global monitor sample spacing","uniform");
obj_properties = setfield(obj_properties, "global monitor use source limits",1);
obj_properties = setfield(obj_properties, "global monitor use wavelength spacing",0);
obj_properties = setfield(obj_properties, "global monitor wavelength center",5.5e-07);
obj_properties = setfield(obj_properties, "global monitor wavelength span",3e-07);
obj_properties = setfield(obj_properties, "global source bandwidth",321206205000000);
obj_properties = setfield(obj_properties, "global source center frequency",588878042500000);
obj_properties = setfield(obj_properties, "global source center wavelength",5.5e-07);
obj_properties = setfield(obj_properties, "global source eliminate discontinuities",1);
obj_properties = setfield(obj_properties, "global source frequency",588878042500000);
obj_properties = setfield(obj_properties, "global source frequency span",321206205000000);
obj_properties = setfield(obj_properties, "global source frequency start",428274940000000);
obj_properties = setfield(obj_properties, "global source frequency stop",749481145000000);
obj_properties = setfield(obj_properties, "global source offset",7.52311e-15);
obj_properties = setfield(obj_properties, "global source optimize for short pulse",1);
obj_properties = setfield(obj_properties, "global source pulse type","broadband");
obj_properties = setfield(obj_properties, "global source pulselength",2.65335e-15);
obj_properties = setfield(obj_properties, "global source set frequency",0);
obj_properties = setfield(obj_properties, "global source set time domain",0);
obj_properties = setfield(obj_properties, "global source set wavelength",1);
obj_properties = setfield(obj_properties, "global source wavelength span",3e-07);
obj_properties = setfield(obj_properties, "global source wavelength start",4e-07);
obj_properties = setfield(obj_properties, "global source wavelength stop",7e-07);
obj_properties = setfield(obj_properties, "index",1);
obj_properties = setfield(obj_properties, "max source time signal length",32768);
obj_properties = setfield(obj_properties, "mesh accuracy",2);
obj_properties = setfield(obj_properties, "mesh cells per wavelength",10);
obj_properties = setfield(obj_properties, "mesh refinement","conformal variant 0");
obj_properties = setfield(obj_properties, "mesh type","auto non-uniform");
obj_properties = setfield(obj_properties, "meshing tolerance",8.81834e-05);
obj_properties = setfield(obj_properties, "min mesh step",2.5e-10);
obj_properties = setfield(obj_properties, "override simulation bandwidth for mesh generation",0);
obj_properties = setfield(obj_properties, "param1",1);
obj_properties = setfield(obj_properties, "param2",1);
obj_properties = setfield(obj_properties, "pml alpha",0);
obj_properties = setfield(obj_properties, "pml alpha polynomial",1);
obj_properties = setfield(obj_properties, "pml kappa",2);
obj_properties = setfield(obj_properties, "pml layers",12);
obj_properties = setfield(obj_properties, "pml max layers",64);
obj_properties = setfield(obj_properties, "pml min layers",12);
obj_properties = setfield(obj_properties, "pml polynomial",3);
obj_properties = setfield(obj_properties, "pml profile",4);
obj_properties = setfield(obj_properties, "pml sigma",0.25);
obj_properties = setfield(obj_properties, "pml type","uniaxial anisotropic PML (legacy)");
obj_properties = setfield(obj_properties, "same settings on all boundaries",1);
obj_properties = setfield(obj_properties, "set process grid",0);
obj_properties = setfield(obj_properties, "set simulation bandwidth",0);
obj_properties = setfield(obj_properties, "simulation frequency max",599584916000000);
obj_properties = setfield(obj_properties, "simulation frequency min",599584916000000);
obj_properties = setfield(obj_properties, "simulation temperature",320);
obj_properties = setfield(obj_properties, "simulation time",4e-12);
obj_properties = setfield(obj_properties, "simulation wavelength max",5e-07);
obj_properties = setfield(obj_properties, "simulation wavelength min",5e-07);
obj_properties = setfield(obj_properties, "snap pec to yee cell boundary",1);
obj_properties = setfield(obj_properties, "type","FDTD");
obj_properties = setfield(obj_properties, "use auto shutoff",0);
obj_properties = setfield(obj_properties, "use divergence checking",1);
obj_properties = setfield(obj_properties, "use early shutoff",0);
obj_properties = setfield(obj_properties, "use legacy conformal interface detection",1);
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",0);
obj_properties = setfield(obj_properties, "x max bc","PML");
obj_properties = setfield(obj_properties, "x min bc","PML");
obj_properties = setfield(obj_properties, "x span",6.5e-06);
obj_properties = setfield(obj_properties, "y",0);
obj_properties = setfield(obj_properties, "y max bc","PML");
obj_properties = setfield(obj_properties, "y min bc","PML");
obj_properties = setfield(obj_properties, "y span",6.5e-06);
obj_properties = setfield(obj_properties, "z",0);
obj_properties = setfield(obj_properties, "z span",1.02e-06);

groupscope("::model");addfdtd;set('same settings on all boundaries', 0);
try{set(obj_properties);}

# monitor (TimeMonitor)
obj_properties = struct;
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "min sampling per cycle",10);
obj_properties = setfield(obj_properties, "monitor type","Point");
obj_properties = setfield(obj_properties, "name","monitor");
obj_properties = setfield(obj_properties, "output Ex",1);
obj_properties = setfield(obj_properties, "output Ey",1);
obj_properties = setfield(obj_properties, "output Ez",1);
obj_properties = setfield(obj_properties, "output Hx",1);
obj_properties = setfield(obj_properties, "output Hy",1);
obj_properties = setfield(obj_properties, "output Hz",1);
obj_properties = setfield(obj_properties, "output Px",0);
obj_properties = setfield(obj_properties, "output Py",0);
obj_properties = setfield(obj_properties, "output Pz",0);
obj_properties = setfield(obj_properties, "output power",0);
obj_properties = setfield(obj_properties, "plugin material","{00000000-0000-0000-0000-000000000000}");
obj_properties = setfield(obj_properties, "record data in pml",0);
obj_properties = setfield(obj_properties, "simulation type","All");
obj_properties = setfield(obj_properties, "spatial interpolation","nearest mesh cell");
obj_properties = setfield(obj_properties, "start time",0);
obj_properties = setfield(obj_properties, "stop method","End of Simulation");
obj_properties = setfield(obj_properties, "type","TimeMonitor");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",1.8e-06);
obj_properties = setfield(obj_properties, "x max",1.8e-06);
obj_properties = setfield(obj_properties, "x min",1.8e-06);
obj_properties = setfield(obj_properties, "y",6e-07);
obj_properties = setfield(obj_properties, "y max",6e-07);
obj_properties = setfield(obj_properties, "y min",6e-07);
obj_properties = setfield(obj_properties, "z",0);
obj_properties = setfield(obj_properties, "z max",0);
obj_properties = setfield(obj_properties, "z min",0);

groupscope("::model");addtime;
try{set(obj_properties);}

# spectrum_monitor (DFTMonitor)
obj_properties = struct;
obj_properties = setfield(obj_properties, "apodization","Full");
obj_properties = setfield(obj_properties, "apodization center",1e-12);
obj_properties = setfield(obj_properties, "apodization time width",5e-13);
obj_properties = setfield(obj_properties, "delta",10000000000000);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "frequency points",5000);
obj_properties = setfield(obj_properties, "monitor type","Point");
obj_properties = setfield(obj_properties, "name","spectrum_monitor");
obj_properties = setfield(obj_properties, "output Ex",1);
obj_properties = setfield(obj_properties, "output Ey",1);
obj_properties = setfield(obj_properties, "output Ez",1);
obj_properties = setfield(obj_properties, "output Hx",1);
obj_properties = setfield(obj_properties, "output Hy",1);
obj_properties = setfield(obj_properties, "output Hz",1);
obj_properties = setfield(obj_properties, "output Px",0);
obj_properties = setfield(obj_properties, "output Py",0);
obj_properties = setfield(obj_properties, "output Pz",0);
obj_properties = setfield(obj_properties, "output power",1);
obj_properties = setfield(obj_properties, "override advanced global monitor settings",0);
obj_properties = setfield(obj_properties, "override global monitor settings",1);
obj_properties = setfield(obj_properties, "partial spectral average",0);
obj_properties = setfield(obj_properties, "record data in pml",0);
obj_properties = setfield(obj_properties, "sample spacing","uniform");
obj_properties = setfield(obj_properties, "simulation type","All");
obj_properties = setfield(obj_properties, "spatial interpolation","nearest mesh cell");
obj_properties = setfield(obj_properties, "standard fourier transform",1);
obj_properties = setfield(obj_properties, "total spectral average",0);
obj_properties = setfield(obj_properties, "type","DFTMonitor");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "use source limits",1);
obj_properties = setfield(obj_properties, "use wavelength spacing",0);
obj_properties = setfield(obj_properties, "x",1.9e-06);
obj_properties = setfield(obj_properties, "x max",1.9e-06);
obj_properties = setfield(obj_properties, "x min",1.9e-06);
obj_properties = setfield(obj_properties, "y",-4e-07);
obj_properties = setfield(obj_properties, "y max",-4e-07);
obj_properties = setfield(obj_properties, "y min",-4e-07);
obj_properties = setfield(obj_properties, "z",0);
obj_properties = setfield(obj_properties, "z max",0);
obj_properties = setfield(obj_properties, "z min",0);

groupscope("::model");addpower;
try{set(obj_properties);}

# movie (MovieMonitor)
obj_properties = struct;
obj_properties = setfield(obj_properties, "TE field component","Electric field intensity");
obj_properties = setfield(obj_properties, "TM field component","Electric field intensity");
obj_properties = setfield(obj_properties, "down sample X",1);
obj_properties = setfield(obj_properties, "down sample Y",1);
obj_properties = setfield(obj_properties, "draw structure outline",1);
obj_properties = setfield(obj_properties, "enabled",0);
obj_properties = setfield(obj_properties, "field component","Electric field intensity");
obj_properties = setfield(obj_properties, "frame rate",30);
obj_properties = setfield(obj_properties, "horizontal resolution",1080);
obj_properties = setfield(obj_properties, "lock aspect ratio",1);
obj_properties = setfield(obj_properties, "min sampling per cycle",10);
obj_properties = setfield(obj_properties, "monitor type","2D Z-normal");
obj_properties = setfield(obj_properties, "name","movie");
obj_properties = setfield(obj_properties, "record data in pml",0);
obj_properties = setfield(obj_properties, "scale",1);
obj_properties = setfield(obj_properties, "simulation type","All");
obj_properties = setfield(obj_properties, "type","MovieMonitor");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",0);
obj_properties = setfield(obj_properties, "x span",1.1e-05);
obj_properties = setfield(obj_properties, "y",0);
obj_properties = setfield(obj_properties, "y span",1.1e-05);
obj_properties = setfield(obj_properties, "z",0);
obj_properties = setfield(obj_properties, "z max",0);
obj_properties = setfield(obj_properties, "z min",0);

groupscope("::model");addmovie;
try{set(obj_properties);}

# mesh (Mesh)
obj_properties = struct;
obj_properties = setfield(obj_properties, "based on a structure",0);
obj_properties = setfield(obj_properties, "buffer",0);
obj_properties = setfield(obj_properties, "directly defined",1);
obj_properties = setfield(obj_properties, "dx",2e-08);
obj_properties = setfield(obj_properties, "dy",2e-08);
obj_properties = setfield(obj_properties, "dz",2e-08);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "name","mesh");
obj_properties = setfield(obj_properties, "override x mesh",1);
obj_properties = setfield(obj_properties, "override y mesh",1);
obj_properties = setfield(obj_properties, "override z mesh",1);
obj_properties = setfield(obj_properties, "set equivalent index",0);
obj_properties = setfield(obj_properties, "set maximum mesh step",1);
obj_properties = setfield(obj_properties, "structure","");
obj_properties = setfield(obj_properties, "type","Mesh");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "x",0);
obj_properties = setfield(obj_properties, "x span",5e-06);
obj_properties = setfield(obj_properties, "y",0);
obj_properties = setfield(obj_properties, "y span",5e-06);
obj_properties = setfield(obj_properties, "z",0);
obj_properties = setfield(obj_properties, "z span",5e-06);

groupscope("::model");addmesh;
try{set(obj_properties);}

# 400nm_monitor (DFTMonitor)
obj_properties = struct;
obj_properties = setfield(obj_properties, "apodization","Full");
obj_properties = setfield(obj_properties, "apodization center",1e-12);
obj_properties = setfield(obj_properties, "apodization time width",5e-13);
obj_properties = setfield(obj_properties, "delta",10000000000000);
obj_properties = setfield(obj_properties, "down sample X",1);
obj_properties = setfield(obj_properties, "down sample Y",1);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "frequency points",1);
obj_properties = setfield(obj_properties, "monitor type","2D Z-normal");
obj_properties = setfield(obj_properties, "name","400nm_monitor");
obj_properties = setfield(obj_properties, "output Ex",1);
obj_properties = setfield(obj_properties, "output Ey",1);
obj_properties = setfield(obj_properties, "output Ez",1);
obj_properties = setfield(obj_properties, "output Hx",1);
obj_properties = setfield(obj_properties, "output Hy",1);
obj_properties = setfield(obj_properties, "output Hz",1);
obj_properties = setfield(obj_properties, "output Px",0);
obj_properties = setfield(obj_properties, "output Py",0);
obj_properties = setfield(obj_properties, "output Pz",0);
obj_properties = setfield(obj_properties, "output power",1);
obj_properties = setfield(obj_properties, "override advanced global monitor settings",0);
obj_properties = setfield(obj_properties, "override global monitor settings",1);
obj_properties = setfield(obj_properties, "partial spectral average",0);
obj_properties = setfield(obj_properties, "record data in pml",0);
obj_properties = setfield(obj_properties, "sample spacing","uniform");
obj_properties = setfield(obj_properties, "simulation type","All");
obj_properties = setfield(obj_properties, "spatial interpolation","specified position");
obj_properties = setfield(obj_properties, "standard fourier transform",1);
obj_properties = setfield(obj_properties, "total spectral average",0);
obj_properties = setfield(obj_properties, "type","DFTMonitor");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "use source limits",0);
obj_properties = setfield(obj_properties, "use wavelength spacing",0);
obj_properties = setfield(obj_properties, "wavelength center",4e-07);
obj_properties = setfield(obj_properties, "wavelength span",0);
obj_properties = setfield(obj_properties, "x",0);
obj_properties = setfield(obj_properties, "x span",5e-06);
obj_properties = setfield(obj_properties, "y",0);
obj_properties = setfield(obj_properties, "y span",5e-06);
obj_properties = setfield(obj_properties, "z",0);
obj_properties = setfield(obj_properties, "z max",0);
obj_properties = setfield(obj_properties, "z min",0);

groupscope("::model");addpower;
try{set(obj_properties);}

# 408nm_monitor (DFTMonitor)
obj_properties = struct;
obj_properties = setfield(obj_properties, "apodization","Full");
obj_properties = setfield(obj_properties, "apodization center",1e-12);
obj_properties = setfield(obj_properties, "apodization time width",5e-13);
obj_properties = setfield(obj_properties, "delta",10000000000000);
obj_properties = setfield(obj_properties, "down sample X",1);
obj_properties = setfield(obj_properties, "down sample Y",1);
obj_properties = setfield(obj_properties, "enabled",1);
obj_properties = setfield(obj_properties, "frequency points",1);
obj_properties = setfield(obj_properties, "monitor type","2D Z-normal");
obj_properties = setfield(obj_properties, "name","408nm_monitor");
obj_properties = setfield(obj_properties, "output Ex",1);
obj_properties = setfield(obj_properties, "output Ey",1);
obj_properties = setfield(obj_properties, "output Ez",1);
obj_properties = setfield(obj_properties, "output Hx",1);
obj_properties = setfield(obj_properties, "output Hy",1);
obj_properties = setfield(obj_properties, "output Hz",1);
obj_properties = setfield(obj_properties, "output Px",0);
obj_properties = setfield(obj_properties, "output Py",0);
obj_properties = setfield(obj_properties, "output Pz",0);
obj_properties = setfield(obj_properties, "output power",1);
obj_properties = setfield(obj_properties, "override advanced global monitor settings",0);
obj_properties = setfield(obj_properties, "override global monitor settings",1);
obj_properties = setfield(obj_properties, "partial spectral average",0);
obj_properties = setfield(obj_properties, "record data in pml",0);
obj_properties = setfield(obj_properties, "sample spacing","uniform");
obj_properties = setfield(obj_properties, "simulation type","All");
obj_properties = setfield(obj_properties, "spatial interpolation","specified position");
obj_properties = setfield(obj_properties, "standard fourier transform",1);
obj_properties = setfield(obj_properties, "total spectral average",0);
obj_properties = setfield(obj_properties, "type","DFTMonitor");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "use source limits",0);
obj_properties = setfield(obj_properties, "use wavelength spacing",0);
obj_properties = setfield(obj_properties, "wavelength center",4.08e-07);
obj_properties = setfield(obj_properties, "wavelength span",0);
obj_properties = setfield(obj_properties, "x",0);
obj_properties = setfield(obj_properties, "x span",5e-06);
obj_properties = setfield(obj_properties, "y",0);
obj_properties = setfield(obj_properties, "y span",5e-06);
obj_properties = setfield(obj_properties, "z",0);
obj_properties = setfield(obj_properties, "z max",0);
obj_properties = setfield(obj_properties, "z min",0);

groupscope("::model");addpower;
try{set(obj_properties);}

# 412nm_monitor (DFTMonitor)
obj_properties = struct;
obj_properties = setfield(obj_properties, "apodization","Full");
obj_properties = setfield(obj_properties, "apodization center",1e-12);
obj_properties = setfield(obj_properties, "apodization time width",5e-13);
obj_properties = setfield(obj_properties, "delta",10000000000000);
obj_properties = setfield(obj_properties, "down sample X",1);
obj_properties = setfield(obj_properties, "down sample Y",1);
obj_properties = setfield(obj_properties, "enabled",0);
obj_properties = setfield(obj_properties, "frequency points",1);
obj_properties = setfield(obj_properties, "monitor type","2D Z-normal");
obj_properties = setfield(obj_properties, "name","412nm_monitor");
obj_properties = setfield(obj_properties, "output Ex",1);
obj_properties = setfield(obj_properties, "output Ey",1);
obj_properties = setfield(obj_properties, "output Ez",1);
obj_properties = setfield(obj_properties, "output Hx",1);
obj_properties = setfield(obj_properties, "output Hy",1);
obj_properties = setfield(obj_properties, "output Hz",1);
obj_properties = setfield(obj_properties, "output Px",0);
obj_properties = setfield(obj_properties, "output Py",0);
obj_properties = setfield(obj_properties, "output Pz",0);
obj_properties = setfield(obj_properties, "output power",1);
obj_properties = setfield(obj_properties, "override advanced global monitor settings",0);
obj_properties = setfield(obj_properties, "override global monitor settings",1);
obj_properties = setfield(obj_properties, "partial spectral average",0);
obj_properties = setfield(obj_properties, "record data in pml",0);
obj_properties = setfield(obj_properties, "sample spacing","uniform");
obj_properties = setfield(obj_properties, "simulation type","All");
obj_properties = setfield(obj_properties, "spatial interpolation","specified position");
obj_properties = setfield(obj_properties, "standard fourier transform",1);
obj_properties = setfield(obj_properties, "total spectral average",0);
obj_properties = setfield(obj_properties, "type","DFTMonitor");
obj_properties = setfield(obj_properties, "use relative coordinates",1);
obj_properties = setfield(obj_properties, "use source limits",0);
obj_properties = setfield(obj_properties, "use wavelength spacing",0);
obj_properties = setfield(obj_properties, "wavelength center",4.12e-07);
obj_properties = setfield(obj_properties, "wavelength span",0);
obj_properties = setfield(obj_properties, "x",0);
obj_properties = setfield(obj_properties, "x span",5e-06);
obj_properties = setfield(obj_properties, "y",0);
obj_properties = setfield(obj_properties, "y span",5e-06);
obj_properties = setfield(obj_properties, "z",0);
obj_properties = setfield(obj_properties, "z max",0);
obj_properties = setfield(obj_properties, "z min",0);

groupscope("::model");addpower;
try{set(obj_properties);}

